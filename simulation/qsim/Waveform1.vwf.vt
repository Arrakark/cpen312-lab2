// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/10/2019 22:29:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          part2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module part2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg add_sub;
reg KEY0;
reg KEY1;
reg [3:0] lsd;
reg [3:0] msd;
// wires                                               
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire [6:0] hex4;
wire [6:0] hex5;
wire LED;

// assign statements (if any)                          
part2 i1 (
// port map - connection between master ports and signals/registers   
	.add_sub(add_sub),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.KEY0(KEY0),
	.KEY1(KEY1),
	.LED(LED),
	.lsd(lsd),
	.msd(msd)
);
initial 
begin 
#1000000 $finish;
end 

// add_sub
initial
begin
	add_sub = 1'b0;
end 

// KEY0
initial
begin
	KEY0 = 1'b0;
	KEY0 = #250000 1'b1;
	KEY0 = #20000 1'b0;
end 

// KEY1
initial
begin
	KEY1 = 1'b0;
	KEY1 = #70000 1'b1;
	KEY1 = #20000 1'b0;
end 
// lsd[ 3 ]
initial
begin
	lsd[3] = 1'b0;
	lsd[3] = #210000 1'b1;
	lsd[3] = #120000 1'b0;
end 
// lsd[ 2 ]
initial
begin
	lsd[2] = 1'b0;
end 
// lsd[ 1 ]
initial
begin
	lsd[1] = 1'b0;
	lsd[1] = #30000 1'b1;
	lsd[1] = #180000 1'b0;
end 
// lsd[ 0 ]
initial
begin
	lsd[0] = 1'b0;
	lsd[0] = #210000 1'b1;
	lsd[0] = #120000 1'b0;
end 
// msd[ 3 ]
initial
begin
	msd[3] = 1'b0;
end 
// msd[ 2 ]
initial
begin
	msd[2] = 1'b0;
	msd[2] = #30000 1'b1;
	msd[2] = #300000 1'b0;
end 
// msd[ 1 ]
initial
begin
	msd[1] = 1'b0;
	msd[1] = #30000 1'b1;
	msd[1] = #300000 1'b0;
end 
// msd[ 0 ]
initial
begin
	msd[0] = 1'b0;
	msd[0] = #30000 1'b1;
	msd[0] = #180000 1'b0;
end 
endmodule

